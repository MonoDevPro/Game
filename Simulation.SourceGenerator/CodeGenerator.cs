using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Simulation.Attributes;

namespace Simulation.SourceGenerator
{
    internal record struct StructInfo(string Name, string Namespace, string Authority, SyncTrigger Trigger);

    internal static class CodeGenerator
    {
        public static string Generate(List<StructInfo> allStructs)
        {
            var serverStructs = allStructs.Where(s => s.Authority == "Server").ToList();
            var clientStructs = allStructs.Where(s => s.Authority == "Client").ToList();

            var sb = new StringBuilder();
            GenerateHeader(sb);
            GeneratePacketTypeEnum(sb, allStructs);
            GeneratePacketStructs(sb, allStructs);
            GeneratePreviousComponentStructs(sb, serverStructs); // Novo
            GeneratePacketFactory(sb, allStructs);
            GeneratePacketProcessor(sb, allStructs);
            GenerateServerSyncSystem(sb, serverStructs);
            GenerateClientIntentSystem(sb, clientStructs);
            GenerateFooter(sb);
            
            return sb.ToString();
        }

        private static void GenerateHeader(StringBuilder sb)
        {
            sb.Append(@"// <auto-generated/>
#nullable enable
#pragma warning disable
using System;
using System.Runtime.CompilerServices;
using Arch.Core;
using Arch.System;
using LiteNetLib;
using MemoryPack;
using Simulation.Core.Server.Systems;
using Simulation.Core.Shared.Network;
using Simulation.Core.Shared.Network.Contracts;
using Simulation.Core.Shared.Components;

namespace Simulation.Core.Shared.Network.Generated
{");
        }
        
        private static void GeneratePreviousComponentStructs(StringBuilder sb, List<StructInfo> serverStructs)
        {
            var onChangeStructs = serverStructs.Where(s => s.Trigger == SyncTrigger.OnChange);
            foreach (var s in onChangeStructs)
            {
                sb.AppendLine($"    internal struct Previous{s.Name} {{ public {s.Namespace}.{s.Name} Value; }}");
            }
        }

        private static void GeneratePacketTypeEnum(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.AppendLine(@"
    public enum PacketType : byte
    {");
            foreach (var s in allStructs) sb.AppendLine($"        {s.Name}Update,");
            sb.AppendLine("    }");
        }

        private static void GeneratePacketStructs(StringBuilder sb, List<StructInfo> allStructs)
        {
            foreach (var s in allStructs)
            {
                sb.AppendLine($@"
    [MemoryPackable]
    public partial struct {s.Name}UpdatePacket : IPacket
    {{
        public int PlayerId {{ get; set; }}
        public {s.Namespace}.{s.Name} Data {{ get; set; }}
    }}");
            }
        }

        private static void GeneratePacketFactory(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.Append(@"
    public static class PacketFactory
    {
        public static PacketType GetPacketType<T>(T packet) where T : IPacket => packet switch
        {");
            foreach (var s in allStructs) sb.AppendLine($"            {s.Name}UpdatePacket _ => PacketType.{s.Name}Update,");
            sb.AppendLine("            _ => throw new ArgumentOutOfRangeException(nameof(packet), $\"Unknown packet type: {typeof(T).Name}\")");
            sb.AppendLine("        };");
            sb.AppendLine("    }");
        }

        private static void GeneratePacketProcessor(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.Append(@"
    public static class PacketProcessor
    {
        public static void Process(World world, PlayerIndexSystem playerIndex, NetPacketReader reader)
        {
            if (reader.AvailableBytes == 0) return;
            var type = (PacketType)reader.GetByte();
            var dataSpan = reader.GetRemainingBytesSegment();
            switch (type)
            {");
            foreach (var s in allStructs)
            {
                sb.AppendLine($@"                case PacketType.{s.Name}Update:
                {{
                    var packet = MemoryPackSerializer.Deserialize<{s.Name}UpdatePacket>(dataSpan);
                    if (playerIndex.TryGetEntity(packet.PlayerId, out var entity))
                    {{
                        world.AddOrSet(entity, packet.Data);
                    }}
                    break;
                }}");
            }
            sb.AppendLine(@"
            }
        }
    }");
        }

        private static void GenerateServerSyncSystem(StringBuilder sb, List<StructInfo> serverStructs)
        {
            var onTickStructs = serverStructs.Where(s => s.Trigger == SyncTrigger.OnTick).ToList();
            var onChangeStructs = serverStructs.Where(s => s.Trigger == SyncTrigger.OnChange).ToList();

            sb.AppendLine(@"
    public partial class GeneratedServerSyncSystem(World world, NetworkManager networkManager) : BaseSystem<World, float>(world)
    {
        public override void Update(in float t)
        {");
            // Chamadas para OnTick
            foreach (var s in onTickStructs)
            {
                sb.AppendLine($"            Sync{s.Name}OnTickQuery(World, networkManager);");
            }
            // Chamadas para OnChange
            foreach (var s in onChangeStructs)
            {
                sb.AppendLine($"            Sync{s.Name}AddPreviousQuery(World);");
                sb.AppendLine($"            Sync{s.Name}OnChangeQuery(World, networkManager);");
            }
            sb.AppendLine("        }");

            // Geração de métodos para OnTick
            foreach (var s in onTickStructs)
            {
                sb.AppendLine($@"
        private readonly QueryDescription {s.Name}OnTick_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}, PlayerId>();
        private void Sync{s.Name}OnTickQuery(World world, NetworkManager networkManager)
        {{
            world.Query(in {s.Name}OnTick_QueryDescription, (in PlayerId id, in {s.Namespace}.{s.Name} comp) => 
            {{
                networkManager.Broadcast(new {s.Name}UpdatePacket {{ PlayerId = id.Value, Data = comp }}, DeliveryMethod.Unreliable);
            }});
        }}");
            }

            // Geração de métodos para OnChange
            foreach (var s in onChangeStructs)
            {
                sb.AppendLine($@"
        private readonly QueryDescription {s.Name}AddPrevious_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}>().WithNone<Previous{s.Name}>();
        private void Sync{s.Name}AddPreviousQuery(World world)
        {{
            world.Query(in {s.Name}AddPrevious_QueryDescription, (Entity entity, ref {s.Namespace}.{s.Name} comp) =>
            {{
                world.Add(entity, new Previous{s.Name} {{ Value = comp }});
            }});
        }}

        private readonly QueryDescription {s.Name}OnChange_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}, PlayerId, Previous{s.Name}>();
        private void Sync{s.Name}OnChangeQuery(World world, NetworkManager networkManager)
        {{
            world.Query(in {s.Name}OnChange_QueryDescription, (in PlayerId id, ref {s.Namespace}.{s.Name} comp, ref Previous{s.Name} prev) =>
            {{
                if (!comp.Equals(prev.Value))
                {{
                    networkManager.Broadcast(new {s.Name}UpdatePacket {{ PlayerId = id.Value, Data = comp }}, DeliveryMethod.Unreliable);
                    prev.Value = comp;
                }}
            }});
        }}");
            }
            sb.AppendLine("    }");
        }

        private static void GenerateClientIntentSystem(StringBuilder sb, List<StructInfo> clientStructs)
        {
            sb.AppendLine(@"
    public partial class GeneratedClientIntentSystem(World world, NetworkManager networkManager) : BaseSystem<World, float>(world)
    {");

            foreach (var s in clientStructs)
            {
                sb.AppendLine($"        private readonly QueryDescription {s.Name}_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}, PlayerId>();");
            }

            sb.AppendLine(@"
        public override void Update(in float t)
        {");
            foreach (var s in clientStructs)
            {
                sb.AppendLine($"            Send{s.Name}Query(World, networkManager);");
            }
            sb.AppendLine("        }");

            foreach (var s in clientStructs)
            {
                sb.AppendLine($@"
        private void Send{s.Name}Query(World world, NetworkManager networkManager)
        {{
            world.Query(in {s.Name}_QueryDescription, (Entity entity, ref PlayerId id, ref {s.Namespace}.{s.Name} comp) =>
            {{
                networkManager.SendToServer(new {s.Name}UpdatePacket {{ PlayerId = id.Value, Data = comp }}, DeliveryMethod.ReliableOrdered);
                world.Remove<{s.Namespace}.{s.Name}>(entity);
            }});
        }}");
            }
            sb.AppendLine("    }");
        }

        private static void GenerateFooter(StringBuilder sb)
        {
            sb.AppendLine("}");
        }
    }

    internal static class SyntaxNodeExtensions
    {
        public static string GetNamespace(this BaseTypeDeclarationSyntax syntax)
        {
            var potentialNamespace = syntax.Parent;
            while (potentialNamespace != null &&
                   !(potentialNamespace is NamespaceDeclarationSyntax) &&
                   !(potentialNamespace is FileScopedNamespaceDeclarationSyntax))
            {
                potentialNamespace = potentialNamespace.Parent;
            }
            return (potentialNamespace as BaseNamespaceDeclarationSyntax)?.Name.ToString() ?? "Global";
        }
    }
}