using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Simulation.SourceGenerator
{
    // Updated StructInfo to include Trigger and SyncRateTicks
    internal record struct StructInfo(string Name, string Namespace, string Authority, string Trigger, ushort SyncRateTicks);

    internal static class CodeGenerator
    {
        public static string Generate(List<StructInfo> allStructs)
        {
            var serverStructs = allStructs.Where(s => s.Authority == "Server").ToList();
            var clientStructs = allStructs.Where(s => s.Authority == "Client").ToList();

            var sb = new StringBuilder();
            GenerateHeader(sb);
            GeneratePacketTypeEnum(sb, allStructs);
            GeneratePacketStructs(sb, allStructs);
            GeneratePacketFactory(sb, allStructs);
            GeneratePacketProcessor(sb, allStructs);
            GenerateServerSyncSystem(sb, serverStructs);
            GenerateClientIntentSystem(sb, clientStructs);
            GenerateFooter(sb);
            
            return sb.ToString();
        }

        private static void GenerateHeader(StringBuilder sb)
        {
            sb.Append(@"// <auto-generated/>
#nullable enable
#pragma warning disable
using System;
using System.Runtime.CompilerServices;
using Arch.Core;
using Arch.System;
using LiteNetLib;
using MemoryPack;
using Simulation.Core.Server.Systems;
using Simulation.Core.Shared.Network;
using Simulation.Core.Shared.Network.Contracts;
using Simulation.Core.Shared.Components;
using Simulation.Core.Shared.Network.Attributes;

namespace Simulation.Core.Shared.Network.Generated
{");
        }

        private static void GeneratePacketTypeEnum(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.AppendLine(@"
    public enum PacketType : byte
    {");
            foreach (var s in allStructs) sb.AppendLine($"        {s.Name}Update,");
            sb.AppendLine("    }");
        }

        private static void GeneratePacketStructs(StringBuilder sb, List<StructInfo> allStructs)
        {
            foreach (var s in allStructs)
            {
                sb.AppendLine($@"
    [MemoryPackable]
    public partial struct {s.Name}UpdatePacket : IPacket
    {{
        public int PlayerId {{ get; set; }}
        public {s.Namespace}.{s.Name} Data {{ get; set; }}
    }}");
            }
        }

        private static void GeneratePacketFactory(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.Append(@"
    public static class PacketFactory
    {
        public static PacketType GetPacketType<T>(T packet) where T : IPacket => packet switch
        {");
            foreach (var s in allStructs) sb.AppendLine($"            {s.Name}UpdatePacket _ => PacketType.{s.Name}Update,");
            sb.AppendLine("            _ => throw new ArgumentOutOfRangeException(nameof(packet), $\"Unknown packet type: {typeof(T).Name}\")");
            sb.AppendLine("        };");
            sb.AppendLine("    }");
        }

        private static void GeneratePacketProcessor(StringBuilder sb, List<StructInfo> allStructs)
        {
            sb.Append(@"
    public static class PacketProcessor
    {
        public static void Process(World world, PlayerIndexSystem playerIndex, NetPacketReader reader)
        {
            if (reader.AvailableBytes == 0) return;
            var type = (PacketType)reader.GetByte();
            var dataSpan = reader.GetRemainingBytesSegment();
            switch (type)
            {");
            foreach (var s in allStructs)
            {
                sb.AppendLine($@"                case PacketType.{s.Name}Update:
                {{
                    var packet = MemoryPackSerializer.Deserialize<{s.Name}UpdatePacket>(dataSpan);
                    if (playerIndex.TryGetEntity(packet.PlayerId, out var entity))
                    {{
                        world.AddOrGet<{s.Name}>(entity, packet.Data);
                    }}
                    break;
                }}");
            }
            sb.AppendLine(@"
            }
        }
    }");
        }

        private static void GenerateServerSyncSystem(StringBuilder sb, List<StructInfo> serverStructs)
        {
            sb.AppendLine(@"
    public partial class GeneratedServerSyncSystem(World world, NetworkManager networkManager) : BaseSystem<World, float>(world)
    {
        private ulong _tickCounter = 0;
        public override void Update(in float t)
        {
            _tickCounter++;");
            foreach (var s in serverStructs)
            {
                if (s.Trigger == "OnTick" && s.SyncRateTicks > 0)
                {
                    sb.AppendLine($"            if (_tickCounter % {s.SyncRateTicks} == 0)");
                    sb.AppendLine($"                Sync{s.Name}Query(World, networkManager);");
                }
                else
                {
                    sb.AppendLine($"            Sync{s.Name}Query(World, networkManager);");
                }
            }
            sb.AppendLine("        }");

            foreach (var s in serverStructs)
            {
                var queryMethodName = $"Sync{s.Name}Query";
                sb.AppendLine($@"
        private readonly QueryDescription {s.Name}_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}, PlayerId>();
        private World? _{s.Name}_Initialized;
        private Query? _{s.Name}_Query;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void {queryMethodName}(World world, NetworkManager networkManager)
        {{
            if (!ReferenceEquals(_{s.Name}_Initialized, world))
            {{
                _{s.Name}_Query = world.Query(in {s.Name}_QueryDescription);
                _{s.Name}_Initialized = world;
            }}

            foreach (ref var chunk in _{s.Name}_Query!)
            {{
                ref var playerIdFirstElement = ref chunk.GetFirst<PlayerId>();
                ref var componentFirstElement = ref chunk.GetFirst<{s.Namespace}.{s.Name}>();

                foreach (var entityIndex in chunk)
                {{
                    ref readonly var playerId = ref Unsafe.Add(ref playerIdFirstElement, entityIndex);
                    ref readonly var component = ref Unsafe.Add(ref componentFirstElement, entityIndex);
                    networkManager.Broadcast(new {s.Name}UpdatePacket {{ PlayerId = playerId.Value, Data = component }}, DeliveryMethod.Unreliable);
                }}
            }}
        }}");
            }
            sb.AppendLine("    }");
        }

        private static void GenerateClientIntentSystem(StringBuilder sb, List<StructInfo> clientStructs)
        {
            sb.AppendLine(@"
    public partial class GeneratedClientIntentSystem(World world, NetworkManager networkManager) : BaseSystem<World, float>(world)
    {
        public override void Update(in float t)
        {");
            foreach (var s in clientStructs)
            {
                sb.AppendLine($"            Send{s.Name}Query(World, networkManager);");
            }
            sb.AppendLine("        }");

            foreach (var s in clientStructs)
            {
                var queryMethodName = $"Send{s.Name}Query";
                sb.AppendLine($@"
        private readonly QueryDescription {s.Name}_QueryDescription = new QueryDescription().WithAll<{s.Namespace}.{s.Name}, PlayerId>();
        private World? _{s.Name}_Initialized;
        private Query? _{s.Name}_Query;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void {queryMethodName}(World world, NetworkManager networkManager)
        {{
            if (!ReferenceEquals(_{s.Name}_Initialized, world))
            {{
                _{s.Name}_Query = world.Query(in {s.Name}_QueryDescription);
                _{s.Name}_Initialized = world;
            }}

            foreach (ref var chunk in _{s.Name}_Query!)
            {{
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var playerIdFirstElement = ref chunk.GetFirst<PlayerId>();
                ref var componentFirstElement = ref chunk.GetFirst<{s.Namespace}.{s.Name}>();

                foreach (var entityIndex in chunk)
                {{
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref readonly var playerId = ref Unsafe.Add(ref playerIdFirstElement, entityIndex);
                    ref readonly var component = ref Unsafe.Add(ref componentFirstElement, entityIndex);
                    
                    networkManager.SendToServer(new {s.Name}UpdatePacket {{ PlayerId = playerId.Value, Data = component }}, DeliveryMethod.ReliableOrdered);
                    world.Remove<{s.Namespace}.{s.Name}>(entity);
                }}
            }}
        }}");
            }
            sb.AppendLine("    }");
        }

        private static void GenerateFooter(StringBuilder sb)
        {
            sb.AppendLine("}");
        }
    }

    internal static class SyntaxNodeExtensions
    {
        public static string GetNamespace(this BaseTypeDeclarationSyntax syntax)
        {
            var potentialNamespace = syntax.Parent;
            while (potentialNamespace != null &&
                   !(potentialNamespace is NamespaceDeclarationSyntax) &&
                   !(potentialNamespace is FileScopedNamespaceDeclarationSyntax))
            {
                potentialNamespace = potentialNamespace.Parent;
            }
            return (potentialNamespace as BaseNamespaceDeclarationSyntax)?.Name.ToString() ?? "Global";
        }
    }
}